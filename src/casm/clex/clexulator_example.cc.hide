#ifndef MYCLEXULATOR_HH
#define MYCLEXULATOR_HH
#include <cstddef>



/****** CLEXULATOR CLASS FOR PRIM ******
Face-centered Cubic (FCC, cF)
 1.00000000
       0.00000000      2.00000000      2.00000000
       2.00000000      0.00000000      2.00000000
       2.00000000      2.00000000      0.00000000
 1
Direct
   0.0000000   0.0000000   0.0000000 A B Va
**/


namespace CASM {

  class Clexulator {
  private:
    // Pointer to memory block that holds current nlist
    const long int *m_nlist_ptr;

    // typedef for method pointers
    typedef double(Clexulator::*BasisFuncPtr)() const;

    // typedef for method pointers
    typedef double(Clexulator::*DeltaBasisFuncPtr)(int, int) const;

    // array of pointers to member functions for calculating basis functions
    BasisFuncPtr m_orbit_func_list[75];

    // array of pointers to member functions for calculating flower functions
    BasisFuncPtr m_flower_func_lists[1][75];

    // array of pointers to member functions for calculating DELTA flower functions
    DeltaBasisFuncPtr m_delta_func_lists[1][75];

    // Occupation Function table for basis site 0:
    double m_occ_func_0_0[3];
    double m_occ_func_0_1[3];

    // Pointer to occupation array inside configuration
    const int *m_occ_ptr;

    // Occupation Function accessors for basis site 0:
    const double &occ_func_0_0(const int &nlist_ind)const {
      return m_occ_func_0_0[*(m_occ_ptr + * (m_nlist_ptr + nlist_ind))];
    }
    const double &occ_func_0_1(const int &nlist_ind)const {
      return m_occ_func_0_1[*(m_occ_ptr + * (m_nlist_ptr + nlist_ind))];
    }

    //default functions for basis function evaluation
    double zero_func() const {
      return 0.0;
    };
    double zero_func(int, int) const {
      return 0.0;
    };

    double eval_bfunc_0_0_0() const;

    double eval_bfunc_1_0_0() const;
    double eval_bfunc_1_0_1() const;

    double site_eval_at_0_bfunc_1_0_0() const;
    double site_eval_at_0_bfunc_1_0_1() const;

    double delta_site_eval_at_0_bfunc_1_0_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_1_0_1(int occ_i, int occ_f) const;

    double eval_bfunc_2_0_0() const;
    double eval_bfunc_2_0_1() const;
    double eval_bfunc_2_0_2() const;

    double site_eval_at_0_bfunc_2_0_0() const;
    double site_eval_at_0_bfunc_2_0_1() const;
    double site_eval_at_0_bfunc_2_0_2() const;

    double delta_site_eval_at_0_bfunc_2_0_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_0_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_0_2(int occ_i, int occ_f) const;

    double eval_bfunc_2_1_0() const;
    double eval_bfunc_2_1_1() const;
    double eval_bfunc_2_1_2() const;

    double site_eval_at_0_bfunc_2_1_0() const;
    double site_eval_at_0_bfunc_2_1_1() const;
    double site_eval_at_0_bfunc_2_1_2() const;

    double delta_site_eval_at_0_bfunc_2_1_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_1_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_1_2(int occ_i, int occ_f) const;

    double eval_bfunc_2_2_0() const;
    double eval_bfunc_2_2_1() const;
    double eval_bfunc_2_2_2() const;

    double site_eval_at_0_bfunc_2_2_0() const;
    double site_eval_at_0_bfunc_2_2_1() const;
    double site_eval_at_0_bfunc_2_2_2() const;

    double delta_site_eval_at_0_bfunc_2_2_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_2_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_2_2(int occ_i, int occ_f) const;

    double eval_bfunc_2_3_0() const;
    double eval_bfunc_2_3_1() const;
    double eval_bfunc_2_3_2() const;

    double site_eval_at_0_bfunc_2_3_0() const;
    double site_eval_at_0_bfunc_2_3_1() const;
    double site_eval_at_0_bfunc_2_3_2() const;

    double delta_site_eval_at_0_bfunc_2_3_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_3_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_3_2(int occ_i, int occ_f) const;

    double eval_bfunc_2_4_0() const;
    double eval_bfunc_2_4_1() const;
    double eval_bfunc_2_4_2() const;

    double site_eval_at_0_bfunc_2_4_0() const;
    double site_eval_at_0_bfunc_2_4_1() const;
    double site_eval_at_0_bfunc_2_4_2() const;

    double delta_site_eval_at_0_bfunc_2_4_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_4_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_4_2(int occ_i, int occ_f) const;

    double eval_bfunc_2_5_0() const;
    double eval_bfunc_2_5_1() const;
    double eval_bfunc_2_5_2() const;

    double site_eval_at_0_bfunc_2_5_0() const;
    double site_eval_at_0_bfunc_2_5_1() const;
    double site_eval_at_0_bfunc_2_5_2() const;

    double delta_site_eval_at_0_bfunc_2_5_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_5_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_2_5_2(int occ_i, int occ_f) const;

    double eval_bfunc_3_0_0() const;
    double eval_bfunc_3_0_1() const;
    double eval_bfunc_3_0_2() const;
    double eval_bfunc_3_0_3() const;

    double site_eval_at_0_bfunc_3_0_0() const;
    double site_eval_at_0_bfunc_3_0_1() const;
    double site_eval_at_0_bfunc_3_0_2() const;
    double site_eval_at_0_bfunc_3_0_3() const;

    double delta_site_eval_at_0_bfunc_3_0_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_0_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_0_2(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_0_3(int occ_i, int occ_f) const;

    double eval_bfunc_3_1_0() const;
    double eval_bfunc_3_1_1() const;
    double eval_bfunc_3_1_2() const;
    double eval_bfunc_3_1_3() const;
    double eval_bfunc_3_1_4() const;
    double eval_bfunc_3_1_5() const;

    double site_eval_at_0_bfunc_3_1_0() const;
    double site_eval_at_0_bfunc_3_1_1() const;
    double site_eval_at_0_bfunc_3_1_2() const;
    double site_eval_at_0_bfunc_3_1_3() const;
    double site_eval_at_0_bfunc_3_1_4() const;
    double site_eval_at_0_bfunc_3_1_5() const;

    double delta_site_eval_at_0_bfunc_3_1_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_1_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_1_2(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_1_3(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_1_4(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_1_5(int occ_i, int occ_f) const;

    double eval_bfunc_3_2_0() const;
    double eval_bfunc_3_2_1() const;
    double eval_bfunc_3_2_2() const;
    double eval_bfunc_3_2_3() const;
    double eval_bfunc_3_2_4() const;
    double eval_bfunc_3_2_5() const;

    double site_eval_at_0_bfunc_3_2_0() const;
    double site_eval_at_0_bfunc_3_2_1() const;
    double site_eval_at_0_bfunc_3_2_2() const;
    double site_eval_at_0_bfunc_3_2_3() const;
    double site_eval_at_0_bfunc_3_2_4() const;
    double site_eval_at_0_bfunc_3_2_5() const;

    double delta_site_eval_at_0_bfunc_3_2_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_2_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_2_2(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_2_3(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_2_4(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_2_5(int occ_i, int occ_f) const;

    double eval_bfunc_3_3_0() const;
    double eval_bfunc_3_3_1() const;
    double eval_bfunc_3_3_2() const;
    double eval_bfunc_3_3_3() const;
    double eval_bfunc_3_3_4() const;
    double eval_bfunc_3_3_5() const;
    double eval_bfunc_3_3_6() const;
    double eval_bfunc_3_3_7() const;

    double site_eval_at_0_bfunc_3_3_0() const;
    double site_eval_at_0_bfunc_3_3_1() const;
    double site_eval_at_0_bfunc_3_3_2() const;
    double site_eval_at_0_bfunc_3_3_3() const;
    double site_eval_at_0_bfunc_3_3_4() const;
    double site_eval_at_0_bfunc_3_3_5() const;
    double site_eval_at_0_bfunc_3_3_6() const;
    double site_eval_at_0_bfunc_3_3_7() const;

    double delta_site_eval_at_0_bfunc_3_3_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_3_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_3_2(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_3_3(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_3_4(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_3_5(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_3_6(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_3_7(int occ_i, int occ_f) const;

    double eval_bfunc_3_4_0() const;
    double eval_bfunc_3_4_1() const;
    double eval_bfunc_3_4_2() const;
    double eval_bfunc_3_4_3() const;
    double eval_bfunc_3_4_4() const;
    double eval_bfunc_3_4_5() const;
    double eval_bfunc_3_4_6() const;
    double eval_bfunc_3_4_7() const;

    double site_eval_at_0_bfunc_3_4_0() const;
    double site_eval_at_0_bfunc_3_4_1() const;
    double site_eval_at_0_bfunc_3_4_2() const;
    double site_eval_at_0_bfunc_3_4_3() const;
    double site_eval_at_0_bfunc_3_4_4() const;
    double site_eval_at_0_bfunc_3_4_5() const;
    double site_eval_at_0_bfunc_3_4_6() const;
    double site_eval_at_0_bfunc_3_4_7() const;

    double delta_site_eval_at_0_bfunc_3_4_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_4_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_4_2(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_4_3(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_4_4(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_4_5(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_4_6(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_3_4_7(int occ_i, int occ_f) const;

    double eval_bfunc_4_0_0() const;
    double eval_bfunc_4_0_1() const;
    double eval_bfunc_4_0_2() const;
    double eval_bfunc_4_0_3() const;
    double eval_bfunc_4_0_4() const;
    double eval_bfunc_4_0_5() const;
    double eval_bfunc_4_0_6() const;
    double eval_bfunc_4_0_7() const;
    double eval_bfunc_4_0_8() const;
    double eval_bfunc_4_0_9() const;
    double eval_bfunc_4_0_10() const;
    double eval_bfunc_4_0_11() const;

    double site_eval_at_0_bfunc_4_0_0() const;
    double site_eval_at_0_bfunc_4_0_1() const;
    double site_eval_at_0_bfunc_4_0_2() const;
    double site_eval_at_0_bfunc_4_0_3() const;
    double site_eval_at_0_bfunc_4_0_4() const;
    double site_eval_at_0_bfunc_4_0_5() const;
    double site_eval_at_0_bfunc_4_0_6() const;
    double site_eval_at_0_bfunc_4_0_7() const;
    double site_eval_at_0_bfunc_4_0_8() const;
    double site_eval_at_0_bfunc_4_0_9() const;
    double site_eval_at_0_bfunc_4_0_10() const;
    double site_eval_at_0_bfunc_4_0_11() const;

    double delta_site_eval_at_0_bfunc_4_0_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_2(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_3(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_4(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_5(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_6(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_7(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_8(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_9(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_10(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_0_11(int occ_i, int occ_f) const;

    double eval_bfunc_4_1_0() const;
    double eval_bfunc_4_1_1() const;
    double eval_bfunc_4_1_2() const;
    double eval_bfunc_4_1_3() const;
    double eval_bfunc_4_1_4() const;
    double eval_bfunc_4_1_5() const;
    double eval_bfunc_4_1_6() const;
    double eval_bfunc_4_1_7() const;
    double eval_bfunc_4_1_8() const;
    double eval_bfunc_4_1_9() const;

    double site_eval_at_0_bfunc_4_1_0() const;
    double site_eval_at_0_bfunc_4_1_1() const;
    double site_eval_at_0_bfunc_4_1_2() const;
    double site_eval_at_0_bfunc_4_1_3() const;
    double site_eval_at_0_bfunc_4_1_4() const;
    double site_eval_at_0_bfunc_4_1_5() const;
    double site_eval_at_0_bfunc_4_1_6() const;
    double site_eval_at_0_bfunc_4_1_7() const;
    double site_eval_at_0_bfunc_4_1_8() const;
    double site_eval_at_0_bfunc_4_1_9() const;

    double delta_site_eval_at_0_bfunc_4_1_0(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_1(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_2(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_3(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_4(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_5(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_6(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_7(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_8(int occ_i, int occ_f) const;
    double delta_site_eval_at_0_bfunc_4_1_9(int occ_i, int occ_f) const;



  public:
    Clexulator();
    ~Clexulator();
    inline
    int nlist_size() const {
      return 75;
    };

    inline
    int corr_size() const {
      return 75;
    };

    // populate internal nlist pointer for current site
    // call using   myclexulator.set_nlist(my_supercell.nlists[l].begin());
    void set_nlist(const long int *_nlist_ptr) {
      m_nlist_ptr = _nlist_ptr;
      return;
    }

    // calculate contribution to global correlations from local neighborhood
    // call using   myclexulator.calc_global_corr_contribution(correlation_array.begin());
    void calc_global_corr_contribution(double *corr_begin) const;

    // calculate contribution to global correlations from local neighborhood
    // ind_list specificies the indices of correlations that should be calculated
    // call using   myclexulator.calc_global_corr_contribution(correlation_array.begin(), ind_list.begin(), ind_list.end());
    void calc_restricted_global_corr_contribution(double *corr_begin, int *ind_list_begin, int *ind_list_end) const;

    // calculate point correlations about basis site 'b_index'
    // call using   myclexulator.calc_point_corr(b, correlation_array.begin());
    void calc_point_corr(int b_index, double *corr_begin) const;

    // calculate point correlations about basis site 'b_index'
    // ind_list specificies the indices of correlations that should be calculated
    // call using   myclexulator.calc_point_corr(b, correlation_array.begin(), ind_list.begin(), ind_list.end());
    void calc_restricted_point_corr(int b_index, double *corr_begin, int *ind_list_begin, int *ind_list_end) const;

    // calculate change in point correlations about basis site 'b_index'
    // due to changing its occupant from 'occ_i' to 'occ_f'
    // call using   myclexulator.calc_delta_point_corr(b, occ_i, occ_f, correlation_array.begin());
    void calc_delta_point_corr(int b_index, int occ_i, int occ_f, double *corr_begin) const;

    // calculate change in point correlations about basis site 'b_index'
    // due to changing its occupant from 'occ_i' to 'occ_f'
    // ind_list specificies the indices of correlations that should be calculated
    // call using   myclexulator.calc_delta_point_corr(b, occ_i, occ_f, correlation_array.begin(), ind_list.begin(), ind_list.end());
    void calc_restricted_delta_point_corr(int b_index, int occ_i, int occ_f, double *corr_begin, int *ind_list_begin, int *ind_list_end) const;

    // Initialize clexulator's internal pointer to the occupation bitstring via
    //     myclexulator.set_config_occ(my_configdof.occupation().begin());
    void set_config_occ(const int *_occ_ptr) {
      m_occ_ptr = _occ_ptr;
    }


  };

  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Clexulator::Clexulator() {
    m_occ_func_0_0[0] = 1.22474, m_occ_func_0_0[1] = 3.84593e-16, m_occ_func_0_0[2] = -1.22474;

    m_occ_func_0_1[0] = 0.707107, m_occ_func_0_1[1] = -1.41421, m_occ_func_0_1[2] = 0.707107;

    m_flower_func_lists[0][63] = &MyClexulator::site_eval_at_0_bfunc_4_0_10;
    m_flower_func_lists[0][64] = &MyClexulator::site_eval_at_0_bfunc_4_0_11;
    m_flower_func_lists[0][65] = &MyClexulator::site_eval_at_0_bfunc_4_1_0;
    m_flower_func_lists[0][66] = &MyClexulator::site_eval_at_0_bfunc_4_1_1;
    m_flower_func_lists[0][67] = &MyClexulator::site_eval_at_0_bfunc_4_1_2;
    m_flower_func_lists[0][68] = &MyClexulator::site_eval_at_0_bfunc_4_1_3;
    m_flower_func_lists[0][69] = &MyClexulator::site_eval_at_0_bfunc_4_1_4;
    m_flower_func_lists[0][70] = &MyClexulator::site_eval_at_0_bfunc_4_1_5;
    m_flower_func_lists[0][71] = &MyClexulator::site_eval_at_0_bfunc_4_1_6;
    m_flower_func_lists[0][72] = &MyClexulator::site_eval_at_0_bfunc_4_1_7;
    m_flower_func_lists[0][73] = &MyClexulator::site_eval_at_0_bfunc_4_1_8;
    m_flower_func_lists[0][74] = &MyClexulator::site_eval_at_0_bfunc_4_1_9;


    m_delta_func_lists[0][0] = &MyClexulator::zero_func;
    m_delta_func_lists[0][1] = &MyClexulator::delta_site_eval_at_0_bfunc_1_0_0;
    m_delta_func_lists[0][2] = &MyClexulator::delta_site_eval_at_0_bfunc_1_0_1;
    m_delta_func_lists[0][3] = &MyClexulator::delta_site_eval_at_0_bfunc_2_0_0;
    m_delta_func_lists[0][4] = &MyClexulator::delta_site_eval_at_0_bfunc_2_0_1;
    m_delta_func_lists[0][5] = &MyClexulator::delta_site_eval_at_0_bfunc_2_0_2;
    m_delta_func_lists[0][6] = &MyClexulator::delta_site_eval_at_0_bfunc_2_1_0;
    m_delta_func_lists[0][7] = &MyClexulator::delta_site_eval_at_0_bfunc_2_1_1;
    m_delta_func_lists[0][8] = &MyClexulator::delta_site_eval_at_0_bfunc_2_1_2;
    m_delta_func_lists[0][9] = &MyClexulator::delta_site_eval_at_0_bfunc_2_2_0;
    m_delta_func_lists[0][10] = &MyClexulator::delta_site_eval_at_0_bfunc_2_2_1;
    m_delta_func_lists[0][11] = &MyClexulator::delta_site_eval_at_0_bfunc_2_2_2;
    m_delta_func_lists[0][12] = &MyClexulator::delta_site_eval_at_0_bfunc_2_3_0;
    m_delta_func_lists[0][13] = &MyClexulator::delta_site_eval_at_0_bfunc_2_3_1;
    m_delta_func_lists[0][14] = &MyClexulator::delta_site_eval_at_0_bfunc_2_3_2;
    m_delta_func_lists[0][15] = &MyClexulator::delta_site_eval_at_0_bfunc_2_4_0;
    m_delta_func_lists[0][16] = &MyClexulator::delta_site_eval_at_0_bfunc_2_4_1;
    m_delta_func_lists[0][17] = &MyClexulator::delta_site_eval_at_0_bfunc_2_4_2;
    m_delta_func_lists[0][18] = &MyClexulator::delta_site_eval_at_0_bfunc_2_5_0;
    m_delta_func_lists[0][19] = &MyClexulator::delta_site_eval_at_0_bfunc_2_5_1;
    m_delta_func_lists[0][20] = &MyClexulator::delta_site_eval_at_0_bfunc_2_5_2;
    m_delta_func_lists[0][21] = &MyClexulator::delta_site_eval_at_0_bfunc_3_0_0;
    m_delta_func_lists[0][22] = &MyClexulator::delta_site_eval_at_0_bfunc_3_0_1;
    m_delta_func_lists[0][23] = &MyClexulator::delta_site_eval_at_0_bfunc_3_0_2;
    m_delta_func_lists[0][24] = &MyClexulator::delta_site_eval_at_0_bfunc_3_0_3;
    m_delta_func_lists[0][25] = &MyClexulator::delta_site_eval_at_0_bfunc_3_1_0;
    m_delta_func_lists[0][26] = &MyClexulator::delta_site_eval_at_0_bfunc_3_1_1;
    m_delta_func_lists[0][27] = &MyClexulator::delta_site_eval_at_0_bfunc_3_1_2;
    m_delta_func_lists[0][28] = &MyClexulator::delta_site_eval_at_0_bfunc_3_1_3;
    m_delta_func_lists[0][29] = &MyClexulator::delta_site_eval_at_0_bfunc_3_1_4;
    m_delta_func_lists[0][30] = &MyClexulator::delta_site_eval_at_0_bfunc_3_1_5;
    m_delta_func_lists[0][31] = &MyClexulator::delta_site_eval_at_0_bfunc_3_2_0;
    m_delta_func_lists[0][32] = &MyClexulator::delta_site_eval_at_0_bfunc_3_2_1;
    m_delta_func_lists[0][33] = &MyClexulator::delta_site_eval_at_0_bfunc_3_2_2;
    m_delta_func_lists[0][34] = &MyClexulator::delta_site_eval_at_0_bfunc_3_2_3;
    m_delta_func_lists[0][35] = &MyClexulator::delta_site_eval_at_0_bfunc_3_2_4;
    m_delta_func_lists[0][36] = &MyClexulator::delta_site_eval_at_0_bfunc_3_2_5;
    m_delta_func_lists[0][37] = &MyClexulator::delta_site_eval_at_0_bfunc_3_3_0;
    m_delta_func_lists[0][38] = &MyClexulator::delta_site_eval_at_0_bfunc_3_3_1;
    m_delta_func_lists[0][39] = &MyClexulator::delta_site_eval_at_0_bfunc_3_3_2;
    m_delta_func_lists[0][40] = &MyClexulator::delta_site_eval_at_0_bfunc_3_3_3;
    m_delta_func_lists[0][41] = &MyClexulator::delta_site_eval_at_0_bfunc_3_3_4;
    m_delta_func_lists[0][42] = &MyClexulator::delta_site_eval_at_0_bfunc_3_3_5;
    m_delta_func_lists[0][43] = &MyClexulator::delta_site_eval_at_0_bfunc_3_3_6;
    m_delta_func_lists[0][44] = &MyClexulator::delta_site_eval_at_0_bfunc_3_3_7;
    m_delta_func_lists[0][45] = &MyClexulator::delta_site_eval_at_0_bfunc_3_4_0;
    m_delta_func_lists[0][46] = &MyClexulator::delta_site_eval_at_0_bfunc_3_4_1;
    m_delta_func_lists[0][47] = &MyClexulator::delta_site_eval_at_0_bfunc_3_4_2;
    m_delta_func_lists[0][48] = &MyClexulator::delta_site_eval_at_0_bfunc_3_4_3;
    m_delta_func_lists[0][49] = &MyClexulator::delta_site_eval_at_0_bfunc_3_4_4;
    m_delta_func_lists[0][50] = &MyClexulator::delta_site_eval_at_0_bfunc_3_4_5;
    m_delta_func_lists[0][51] = &MyClexulator::delta_site_eval_at_0_bfunc_3_4_6;
    m_delta_func_lists[0][52] = &MyClexulator::delta_site_eval_at_0_bfunc_3_4_7;
    m_delta_func_lists[0][53] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_0;
    m_delta_func_lists[0][54] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_1;
    m_delta_func_lists[0][55] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_2;
    m_delta_func_lists[0][56] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_3;
    m_delta_func_lists[0][57] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_4;
    m_delta_func_lists[0][58] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_5;
    m_delta_func_lists[0][59] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_6;
    m_delta_func_lists[0][60] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_7;
    m_delta_func_lists[0][61] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_8;
    m_delta_func_lists[0][62] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_9;
    m_delta_func_lists[0][63] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_10;
    m_delta_func_lists[0][64] = &MyClexulator::delta_site_eval_at_0_bfunc_4_0_11;
    m_delta_func_lists[0][65] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_0;
    m_delta_func_lists[0][66] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_1;
    m_delta_func_lists[0][67] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_2;
    m_delta_func_lists[0][68] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_3;
    m_delta_func_lists[0][69] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_4;
    m_delta_func_lists[0][70] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_5;
    m_delta_func_lists[0][71] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_6;
    m_delta_func_lists[0][72] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_7;
    m_delta_func_lists[0][73] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_8;
    m_delta_func_lists[0][74] = &MyClexulator::delta_site_eval_at_0_bfunc_4_1_9;


  }

  MyClexulator::~MyClexulator() {
    >>> >>> > develop
    //nothing here for now
  }

  // calculate contribution to global correlations from local neighborhood
  void Clexulator::calc_global_corr_contribution(double *corr_begin) const {
    for(int i = 0; i < corr_size(); i++) {
      *(corr_begin + i) = (this->*m_orbit_func_list[i])();
    }
  }

  // calculate point correlations about basis site 'b_index'
  // call using   myclexulator.calc_point_corr(b, correlation_array.begin(), ind_list.begin(), ind_list.end());
  void Clexulator::calc_restricted_global_corr_contribution(double *corr_begin, int *ind_list_begin, int *ind_list_end) const {
    for(; ind_list_begin < ind_list_end; ind_list_begin++) {
      *(corr_begin + *ind_list_begin) = (this->*m_orbit_func_list[*ind_list_begin])();
    }
  }

  // calculate point correlations about basis site 'b_index'
  void Clexulator::calc_point_corr(int b_index, double *corr_begin) const {
    for(int i = 0; i < corr_size(); i++) {
      *(corr_begin + i) = (this->*m_flower_func_lists[b_index][i])();
    }
  }

  // calculate point correlations about basis site 'b_index'
  // ind_list specificies the indices of correlations that should be calculated
  void Clexulator::calc_restricted_point_corr(int b_index, double *corr_begin, int *ind_list_begin, int *ind_list_end) const {
    for(; ind_list_begin < ind_list_end; ind_list_begin++) {
      *(corr_begin + *ind_list_begin) = (this->*m_flower_func_lists[b_index][*ind_list_begin])();
    }
  }

  // calculate change in point correlations about basis site 'b_index'
  // due to change its occupant from 'occ_i' to 'occ_f'
  void Clexulator::calc_delta_point_corr(int b_index, int occ_i, int occ_f, double *corr_begin) const {
    for(int i = 0; i < corr_size(); i++) {
      *(corr_begin + i) = (this->*m_delta_func_lists[b_index][i])(occ_i, occ_f);
    }
  }

  // calculate change in point correlations about basis site 'b_index'
  // due to changing its occupant from 'occ_i' to 'occ_f'
  // ind_list specificies the indices of correlations that should be calculated
  void Clexulator::calc_restricted_delta_point_corr(int b_index, int occ_i, int occ_f, double *corr_begin, int *ind_list_begin, int *ind_list_end) const {
    for(; ind_list_begin < ind_list_end; ind_list_begin++) {
      *(corr_begin + *ind_list_begin) = (this->*m_delta_func_lists[b_index][*ind_list_begin])(occ_i, occ_f);
    }
  }

  // Basis functions for empty cluster:
  double Clexulator::eval_bfunc_0_0_0() const {
    return (1);
  }

  /**** Basis functions for orbit 1, 0****
  #Points: 1
  MaxLength: 0  MinLength: 0
   0.7000000   0.7000000   0.7000000 A B
  ****/
  double Clexulator::eval_bfunc_1_0_0() const {
    return (occ_func_1_0(1));
  }

  double Clexulator::site_eval_at_1_bfunc_1_0_0() const {
    return (occ_func_1_0(1));
  }

  double Clexulator::delta_site_eval_at_1_bfunc_1_0_0(int occ_i, int occ_f) const {
    return (m_occ_func_1_0[occ_f] - m_occ_func_1_0[occ_i]);
  }

  /**** Basis functions for orbit 1, 1****
  #Points: 1
  MaxLength: 0.0000000  MinLength: 0.0000000
   0.0000000   0.0000000   0.0000000 A B Va
  ****/
  double Clexulator::eval_bfunc_1_1_0() const {
    return (occ_func_0_0(0));
  }
  double Clexulator::eval_bfunc_1_1_1() const {
    return (occ_func_0_1(0));
  }

  double Clexulator::site_eval_at_0_bfunc_1_1_0() const {
    return (occ_func_0_0(0));
  }
  double Clexulator::site_eval_at_0_bfunc_1_1_1() const {
    return (occ_func_0_1(0));
  }

  double Clexulator::delta_site_eval_at_0_bfunc_1_1_0(int occ_i, int occ_f) const {
    return (m_occ_func_0_0[occ_f] - m_occ_func_0_0[occ_i]);
  }
  double Clexulator::delta_site_eval_at_0_bfunc_1_1_1(int occ_i, int occ_f) const {
    return (m_occ_func_0_1[occ_f] - m_occ_func_0_1[occ_i]);
  }

  /**** Basis functions for orbit 2, 0****
  #Points: 2
  MaxLength: 2.8284271  MinLength: 2.8284271
   0.0000000   0.0000000   0.0000000 A B Va
   0.0000000   0.0000000  -1.0000000 A B Va
  ****/
  double Clexulator::eval_bfunc_2_0_0() const {
    return ((occ_func_1_0(1) * occ_func_0_0(0)) + (occ_func_1_0(1) * occ_func_0_0(2)) + (occ_func_1_0(1) * occ_func_0_0(4)) + (occ_func_1_0(1) * occ_func_0_0(6))) / 4.0;
  }
  double Clexulator::eval_bfunc_2_0_1() const {
    return ((occ_func_1_0(1) * occ_func_0_1(0)) + (occ_func_1_0(1) * occ_func_0_1(2)) + (occ_func_1_0(1) * occ_func_0_1(4)) + (occ_func_1_0(1) * occ_func_0_1(6))) / 4.0;
  }

  double Clexulator::site_eval_at_0_bfunc_2_0_0() const {
    return (occ_func_1_0(1) * occ_func_0_0(0)) + (occ_func_1_0(3) * occ_func_0_0(0)) + (occ_func_1_0(5) * occ_func_0_0(0)) + (occ_func_1_0(7) * occ_func_0_0(0));
  }
  double Clexulator::site_eval_at_0_bfunc_2_0_1() const {
    return (occ_func_1_0(1) * occ_func_0_1(0)) + (occ_func_1_0(3) * occ_func_0_1(0)) + (occ_func_1_0(5) * occ_func_0_1(0)) + (occ_func_1_0(7) * occ_func_0_1(0));
  }

  double Clexulator::delta_site_eval_at_0_bfunc_2_0_0(int occ_i, int occ_f) const {
    return (m_occ_func_0_0[occ_f] - m_occ_func_0_0[occ_i]) * ((occ_func_1_0(1)) + (occ_func_1_0(3)) + (occ_func_1_0(5)) + (occ_func_1_0(7)));
  }
  double Clexulator::delta_site_eval_at_0_bfunc_2_0_1(int occ_i, int occ_f) const {
    return (m_occ_func_0_1[occ_f] - m_occ_func_0_1[occ_i]) * ((occ_func_1_0(1)) + (occ_func_1_0(3)) + (occ_func_1_0(5)) + (occ_func_1_0(7)));
  }

  double Clexulator::site_eval_at_1_bfunc_2_0_0() const {
    return (occ_func_1_0(1) * occ_func_0_0(0)) + (occ_func_1_0(1) * occ_func_0_0(2)) + (occ_func_1_0(1) * occ_func_0_0(4)) + (occ_func_1_0(1) * occ_func_0_0(6));
  }
  double Clexulator::site_eval_at_1_bfunc_2_0_1() const {
    return (occ_func_1_0(1) * occ_func_0_1(0)) + (occ_func_1_0(1) * occ_func_0_1(2)) + (occ_func_1_0(1) * occ_func_0_1(4)) + (occ_func_1_0(1) * occ_func_0_1(6));
  }

  double Clexulator::delta_site_eval_at_1_bfunc_2_0_0(int occ_i, int occ_f) const {
    return (m_occ_func_1_0[occ_f] - m_occ_func_1_0[occ_i]) * ((occ_func_0_0(0)) + (occ_func_0_0(2)) + (occ_func_0_0(4)) + (occ_func_0_0(6)));
  }
  double Clexulator::delta_site_eval_at_1_bfunc_2_0_1(int occ_i, int occ_f) const {
    return (m_occ_func_1_0[occ_f] - m_occ_func_1_0[occ_i]) * ((occ_func_0_1(0)) + (occ_func_0_1(2)) + (occ_func_0_1(4)) + (occ_func_0_1(6)));
  }

  /**** Basis functions for orbit 2, 1****
  #Points: 2
  MaxLength: 4.0000000  MinLength: 4.0000000
   0.0000000   0.0000000   0.0000000 A B Va
   1.0000000  -1.0000000  -1.0000000 A B Va
  ****/
  double Clexulator::eval_bfunc_2_1_0() const {
    return ((occ_func_1_0(1) * occ_func_1_0(3)) + (occ_func_1_0(1) * occ_func_1_0(9)) + (occ_func_1_0(1) * occ_func_1_0(11)) + (occ_func_1_0(1) * occ_func_1_0(12)) + (occ_func_1_0(1) * occ_func_1_0(14)) + (occ_func_1_0(1) * occ_func_1_0(15))) / 6.0;
  }

  double Clexulator::site_eval_at_1_bfunc_2_1_0() const {
    return (occ_func_1_0(1) * occ_func_1_0(3)) + (occ_func_1_0(8) * occ_func_1_0(1)) + (occ_func_1_0(1) * occ_func_1_0(9)) + (occ_func_1_0(10) * occ_func_1_0(1)) + (occ_func_1_0(1) * occ_func_1_0(11)) + (occ_func_1_0(5) * occ_func_1_0(1)) + (occ_func_1_0(1) * occ_func_1_0(12)) + (occ_func_1_0(13) * occ_func_1_0(1)) + (occ_func_1_0(1) * occ_func_1_0(14)) + (occ_func_1_0(7) * occ_func_1_0(1)) + (occ_func_1_0(1) * occ_func_1_0(15)) + (occ_func_1_0(16) * occ_func_1_0(1));
  }

  double Clexulator::delta_site_eval_at_1_bfunc_2_1_0(int occ_i, int occ_f) const {
    return (m_occ_func_1_0[occ_f] - m_occ_func_1_0[occ_i]) * ((occ_func_1_0(3)) + (occ_func_1_0(8)) + (occ_func_1_0(9)) + (occ_func_1_0(10)) + (occ_func_1_0(11)) + (occ_func_1_0(5)) + (occ_func_1_0(12)) + (occ_func_1_0(13)) + (occ_func_1_0(14)) + (occ_func_1_0(7)) + (occ_func_1_0(15)) + (occ_func_1_0(16)));
  }

  /**** Basis functions for orbit 2, 2****
  #Points: 2
  MaxLength: 4.8989795  MinLength: 4.8989795
   0.0000000   0.0000000   0.0000000 A B Va
   1.0000000   1.0000000   0.0000000 A B Va
  ****/
  double Clexulator::eval_bfunc_2_2_0() const {
    return ((occ_func_0_0(0) * occ_func_0_0(17)) + (occ_func_0_0(0) * occ_func_0_0(18)) + (occ_func_0_0(0) * occ_func_0_0(4)) + (occ_func_0_0(0) * occ_func_0_0(21)) + (occ_func_0_0(0) * occ_func_0_0(6)) + (occ_func_0_0(0) * occ_func_0_0(24))) / 6.0;
  }
  double Clexulator::eval_bfunc_2_2_1() const {
    return (((0.707107 * occ_func_0_1(0) * occ_func_0_0(17) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(17))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(18) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(18))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(4) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(4))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(21) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(21))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(6) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(6))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(24) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(24)))) / 6.0;
  }
  double Clexulator::eval_bfunc_2_2_2() const {
    return ((occ_func_0_1(0) * occ_func_0_1(17)) + (occ_func_0_1(0) * occ_func_0_1(18)) + (occ_func_0_1(0) * occ_func_0_1(4)) + (occ_func_0_1(0) * occ_func_0_1(21)) + (occ_func_0_1(0) * occ_func_0_1(6)) + (occ_func_0_1(0) * occ_func_0_1(24))) / 6.0;
  }

  double Clexulator::site_eval_at_0_bfunc_2_2_0() const {
    return (occ_func_0_0(0) * occ_func_0_0(17)) + (occ_func_0_0(2) * occ_func_0_0(0)) + (occ_func_0_0(0) * occ_func_0_0(18)) + (occ_func_0_0(19) * occ_func_0_0(0)) + (occ_func_0_0(0) * occ_func_0_0(4)) + (occ_func_0_0(20) * occ_func_0_0(0)) + (occ_func_0_0(0) * occ_func_0_0(21)) + (occ_func_0_0(22) * occ_func_0_0(0)) + (occ_func_0_0(0) * occ_func_0_0(6)) + (occ_func_0_0(23) * occ_func_0_0(0)) + (occ_func_0_0(0) * occ_func_0_0(24)) + (occ_func_0_0(25) * occ_func_0_0(0));
  }
  double Clexulator::site_eval_at_0_bfunc_2_2_1() const {
    return ((0.707107 * occ_func_0_1(0) * occ_func_0_0(17) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(17))) + ((0.707107 * occ_func_0_1(2) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(2) * occ_func_0_1(0))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(18) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(18))) + ((0.707107 * occ_func_0_1(19) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(19) * occ_func_0_1(0))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(4) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(4))) + ((0.707107 * occ_func_0_1(20) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(20) * occ_func_0_1(0))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(21) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(21))) + ((0.707107 * occ_func_0_1(22) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(22) * occ_func_0_1(0))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(6) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(6))) + ((0.707107 * occ_func_0_1(23) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(23) * occ_func_0_1(0))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(24) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(24))) + ((0.707107 * occ_func_0_1(25) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(25) * occ_func_0_1(0)));
  }
  double Clexulator::site_eval_at_0_bfunc_2_2_2() const {
    return (occ_func_0_1(0) * occ_func_0_1(17)) + (occ_func_0_1(2) * occ_func_0_1(0)) + (occ_func_0_1(0) * occ_func_0_1(18)) + (occ_func_0_1(19) * occ_func_0_1(0)) + (occ_func_0_1(0) * occ_func_0_1(4)) + (occ_func_0_1(20) * occ_func_0_1(0)) + (occ_func_0_1(0) * occ_func_0_1(21)) + (occ_func_0_1(22) * occ_func_0_1(0)) + (occ_func_0_1(0) * occ_func_0_1(6)) + (occ_func_0_1(23) * occ_func_0_1(0)) + (occ_func_0_1(0) * occ_func_0_1(24)) + (occ_func_0_1(25) * occ_func_0_1(0));
  }

  double Clexulator::delta_site_eval_at_0_bfunc_2_2_0(int occ_i, int occ_f) const {
    return (m_occ_func_0_0[occ_f] - m_occ_func_0_0[occ_i]) * ((occ_func_0_0(17)) + (occ_func_0_0(2)) + (occ_func_0_0(18)) + (occ_func_0_0(19)) + (occ_func_0_0(4)) + (occ_func_0_0(20)) + (occ_func_0_0(21)) + (occ_func_0_0(22)) + (occ_func_0_0(6)) + (occ_func_0_0(23)) + (occ_func_0_0(24)) + (occ_func_0_0(25)));
  }
  double Clexulator::delta_site_eval_at_0_bfunc_2_2_1(int occ_i, int occ_f) const {
    return (m_occ_func_0_0[occ_f] - m_occ_func_0_0[occ_i]) * ((0.707107 * occ_func_0_1(17)) + (0.707107 * occ_func_0_1(2)) + (0.707107 * occ_func_0_1(18)) + (0.707107 * occ_func_0_1(19)) + (0.707107 * occ_func_0_1(4)) + (0.707107 * occ_func_0_1(20)) + (0.707107 * occ_func_0_1(21)) + (0.707107 * occ_func_0_1(22)) + (0.707107 * occ_func_0_1(6)) + (0.707107 * occ_func_0_1(23)) + (0.707107 * occ_func_0_1(24)) + (0.707107 * occ_func_0_1(25))) + (m_occ_func_0_1[occ_f] - m_occ_func_0_1[occ_i]) * ((0.707107 * occ_func_0_0(17)) + (0.707107 * occ_func_0_0(2)) + (0.707107 * occ_func_0_0(18)) + (0.707107 * occ_func_0_0(19)) + (0.707107 * occ_func_0_0(4)) + (0.707107 * occ_func_0_0(20)) + (0.707107 * occ_func_0_0(21)) + (0.707107 * occ_func_0_0(22)) + (0.707107 * occ_func_0_0(6)) + (0.707107 * occ_func_0_0(23)) + (0.707107 * occ_func_0_0(24)) + (0.707107 * occ_func_0_0(25)));
  }
  double Clexulator::delta_site_eval_at_0_bfunc_2_2_2(int occ_i, int occ_f) const {
    return (m_occ_func_0_1[occ_f] - m_occ_func_0_1[occ_i]) * ((occ_func_0_1(17)) + (occ_func_0_1(2)) + (occ_func_0_1(18)) + (occ_func_0_1(19)) + (occ_func_0_1(4)) + (occ_func_0_1(20)) + (occ_func_0_1(21)) + (occ_func_0_1(22)) + (occ_func_0_1(6)) + (occ_func_0_1(23)) + (occ_func_0_1(24)) + (occ_func_0_1(25)));
  }

  /**** Basis functions for orbit 2, 3****
  #Points: 2
  MaxLength: 5.6568542  MinLength: 5.6568542
   0.0000000   0.0000000   0.0000000 A B Va
   2.0000000   0.0000000   0.0000000 A B Va
  ****/
  double Clexulator::eval_bfunc_2_3_0() const {
    return ((occ_func_1_0(1) * occ_func_0_0(22)) + (occ_func_1_0(1) * occ_func_0_0(26)) + (occ_func_1_0(1) * occ_func_0_0(28)) + (occ_func_1_0(1) * occ_func_0_0(19)) + (occ_func_1_0(1) * occ_func_0_0(24)) + (occ_func_1_0(1) * occ_func_0_0(21)) + (occ_func_1_0(1) * occ_func_0_0(30)) + (occ_func_1_0(1) * occ_func_0_0(32)) + (occ_func_1_0(1) * occ_func_0_0(18)) + (occ_func_1_0(1) * occ_func_0_0(34)) + (occ_func_1_0(1) * occ_func_0_0(36)) + (occ_func_1_0(1) * occ_func_0_0(25))) / 12.0;
  }
  double Clexulator::eval_bfunc_2_3_1() const {
    return ((occ_func_1_0(1) * occ_func_0_1(22)) + (occ_func_1_0(1) * occ_func_0_1(26)) + (occ_func_1_0(1) * occ_func_0_1(28)) + (occ_func_1_0(1) * occ_func_0_1(19)) + (occ_func_1_0(1) * occ_func_0_1(24)) + (occ_func_1_0(1) * occ_func_0_1(21)) + (occ_func_1_0(1) * occ_func_0_1(30)) + (occ_func_1_0(1) * occ_func_0_1(32)) + (occ_func_1_0(1) * occ_func_0_1(18)) + (occ_func_1_0(1) * occ_func_0_1(34)) + (occ_func_1_0(1) * occ_func_0_1(36)) + (occ_func_1_0(1) * occ_func_0_1(25))) / 12.0;
  }

  double Clexulator::site_eval_at_0_bfunc_2_3_0() const {
    return (occ_func_1_0(12) * occ_func_0_0(0)) + (occ_func_1_0(27) * occ_func_0_0(0)) + (occ_func_1_0(29) * occ_func_0_0(0)) + (occ_func_1_0(9) * occ_func_0_0(0)) + (occ_func_1_0(16) * occ_func_0_0(0)) + (occ_func_1_0(13) * occ_func_0_0(0)) + (occ_func_1_0(31) * occ_func_0_0(0)) + (occ_func_1_0(33) * occ_func_0_0(0)) + (occ_func_1_0(10) * occ_func_0_0(0)) + (occ_func_1_0(35) * occ_func_0_0(0)) + (occ_func_1_0(37) * occ_func_0_0(0)) + (occ_func_1_0(15) * occ_func_0_0(0));
  }
  double Clexulator::site_eval_at_0_bfunc_2_3_1() const {
    return (occ_func_1_0(12) * occ_func_0_1(0)) + (occ_func_1_0(27) * occ_func_0_1(0)) + (occ_func_1_0(29) * occ_func_0_1(0)) + (occ_func_1_0(9) * occ_func_0_1(0)) + (occ_func_1_0(16) * occ_func_0_1(0)) + (occ_func_1_0(13) * occ_func_0_1(0)) + (occ_func_1_0(31) * occ_func_0_1(0)) + (occ_func_1_0(33) * occ_func_0_1(0)) + (occ_func_1_0(10) * occ_func_0_1(0)) + (occ_func_1_0(35) * occ_func_0_1(0)) + (occ_func_1_0(37) * occ_func_0_1(0)) + (occ_func_1_0(15) * occ_func_0_1(0));
  }

  double Clexulator::delta_site_eval_at_0_bfunc_2_3_0(int occ_i, int occ_f) const {
    return (m_occ_func_0_0[occ_f] - m_occ_func_0_0[occ_i]) * ((occ_func_1_0(12)) + (occ_func_1_0(27)) + (occ_func_1_0(29)) + (occ_func_1_0(9)) + (occ_func_1_0(16)) + (occ_func_1_0(13)) + (occ_func_1_0(31)) + (occ_func_1_0(33)) + (occ_func_1_0(10)) + (occ_func_1_0(35)) + (occ_func_1_0(37)) + (occ_func_1_0(15)));
  }
  double Clexulator::delta_site_eval_at_0_bfunc_2_3_1(int occ_i, int occ_f) const {
    return (m_occ_func_0_1[occ_f] - m_occ_func_0_1[occ_i]) * ((occ_func_1_0(12)) + (occ_func_1_0(27)) + (occ_func_1_0(29)) + (occ_func_1_0(9)) + (occ_func_1_0(16)) + (occ_func_1_0(13)) + (occ_func_1_0(31)) + (occ_func_1_0(33)) + (occ_func_1_0(10)) + (occ_func_1_0(35)) + (occ_func_1_0(37)) + (occ_func_1_0(15)));
  }

  double Clexulator::site_eval_at_1_bfunc_2_3_0() const {
    return (occ_func_1_0(1) * occ_func_0_0(22)) + (occ_func_1_0(1) * occ_func_0_0(26)) + (occ_func_1_0(1) * occ_func_0_0(28)) + (occ_func_1_0(1) * occ_func_0_0(19)) + (occ_func_1_0(1) * occ_func_0_0(24)) + (occ_func_1_0(1) * occ_func_0_0(21)) + (occ_func_1_0(1) * occ_func_0_0(30)) + (occ_func_1_0(1) * occ_func_0_0(32)) + (occ_func_1_0(1) * occ_func_0_0(18)) + (occ_func_1_0(1) * occ_func_0_0(34)) + (occ_func_1_0(1) * occ_func_0_0(36)) + (occ_func_1_0(1) * occ_func_0_0(25));
  }
  double Clexulator::site_eval_at_1_bfunc_2_3_1() const {
    return (occ_func_1_0(1) * occ_func_0_1(22)) + (occ_func_1_0(1) * occ_func_0_1(26)) + (occ_func_1_0(1) * occ_func_0_1(28)) + (occ_func_1_0(1) * occ_func_0_1(19)) + (occ_func_1_0(1) * occ_func_0_1(24)) + (occ_func_1_0(1) * occ_func_0_1(21)) + (occ_func_1_0(1) * occ_func_0_1(30)) + (occ_func_1_0(1) * occ_func_0_1(32)) + (occ_func_1_0(1) * occ_func_0_1(18)) + (occ_func_1_0(1) * occ_func_0_1(34)) + (occ_func_1_0(1) * occ_func_0_1(36)) + (occ_func_1_0(1) * occ_func_0_1(25));
  }

  double Clexulator::delta_site_eval_at_1_bfunc_2_3_0(int occ_i, int occ_f) const {
    return (m_occ_func_1_0[occ_f] - m_occ_func_1_0[occ_i]) * ((occ_func_0_0(22)) + (occ_func_0_0(26)) + (occ_func_0_0(28)) + (occ_func_0_0(19)) + (occ_func_0_0(24)) + (occ_func_0_0(21)) + (occ_func_0_0(30)) + (occ_func_0_0(32)) + (occ_func_0_0(18)) + (occ_func_0_0(34)) + (occ_func_0_0(36)) + (occ_func_0_0(25)));
  }
  double Clexulator::delta_site_eval_at_1_bfunc_2_3_1(int occ_i, int occ_f) const {
    return (m_occ_func_1_0[occ_f] - m_occ_func_1_0[occ_i]) * ((occ_func_0_1(22)) + (occ_func_0_1(26)) + (occ_func_0_1(28)) + (occ_func_0_1(19)) + (occ_func_0_1(24)) + (occ_func_0_1(21)) + (occ_func_0_1(30)) + (occ_func_0_1(32)) + (occ_func_0_1(18)) + (occ_func_0_1(34)) + (occ_func_0_1(36)) + (occ_func_0_1(25)));
  }

  /**** Basis functions for orbit 2, 4****
  #Points: 2
  MaxLength: 6.9282032  MinLength: 6.9282032
   0.0000000   0.0000000   0.0000000 A B Va
   1.0000000   1.0000000   1.0000000 A B Va
  ****/
  double Clexulator::eval_bfunc_2_4_0() const {
    return ((occ_func_0_0(0) * occ_func_0_0(38)) + (occ_func_0_0(0) * occ_func_0_0(26)) + (occ_func_0_0(0) * occ_func_0_0(40))) / 3.0;
  }
  double Clexulator::eval_bfunc_2_4_1() const {
    return (((0.707107 * occ_func_0_1(0) * occ_func_0_0(38) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(38))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(26) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(26))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(40) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(40)))) / 3.0;
  }
  double Clexulator::eval_bfunc_2_4_2() const {
    return ((occ_func_0_1(0) * occ_func_0_1(38)) + (occ_func_0_1(0) * occ_func_0_1(26)) + (occ_func_0_1(0) * occ_func_0_1(40))) / 3.0;
  }

  double Clexulator::site_eval_at_0_bfunc_2_4_0() const {
    return (occ_func_0_0(0) * occ_func_0_0(38)) + (occ_func_0_0(34) * occ_func_0_0(0)) + (occ_func_0_0(0) * occ_func_0_0(26)) + (occ_func_0_0(39) * occ_func_0_0(0)) + (occ_func_0_0(0) * occ_func_0_0(40)) + (occ_func_0_0(30) * occ_func_0_0(0));
  }
  double Clexulator::site_eval_at_0_bfunc_2_4_1() const {
    return ((0.707107 * occ_func_0_1(0) * occ_func_0_0(38) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(38))) + ((0.707107 * occ_func_0_1(34) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(34) * occ_func_0_1(0))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(26) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(26))) + ((0.707107 * occ_func_0_1(39) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(39) * occ_func_0_1(0))) + ((0.707107 * occ_func_0_1(0) * occ_func_0_0(40) + 0.707107 * occ_func_0_0(0) * occ_func_0_1(40))) + ((0.707107 * occ_func_0_1(30) * occ_func_0_0(0) + 0.707107 * occ_func_0_0(30) * occ_func_0_1(0)));
  }
  double Clexulator::site_eval_at_0_bfunc_2_4_2() const {
    return (occ_func_0_1(0) * occ_func_0_1(38)) + (occ_func_0_1(34) * occ_func_0_1(0)) + (occ_func_0_1(0) * occ_func_0_1(26)) + (occ_func_0_1(39) * occ_func_0_1(0)) + (occ_func_0_1(0) * occ_func_0_1(40)) + (occ_func_0_1(30) * occ_func_0_1(0));
  }

  double Clexulator::delta_site_eval_at_0_bfunc_2_4_0(int occ_i, int occ_f) const {
    return (m_occ_func_0_0[occ_f] - m_occ_func_0_0[occ_i]) * ((occ_func_0_0(38)) + (occ_func_0_0(34)) + (occ_func_0_0(26)) + (occ_func_0_0(39)) + (occ_func_0_0(40)) + (occ_func_0_0(30)));
  }
  double Clexulator::delta_site_eval_at_0_bfunc_2_4_1(int occ_i, int occ_f) const {
    return (m_occ_func_0_0[occ_f] - m_occ_func_0_0[occ_i]) * ((0.707107 * occ_func_0_1(38)) + (0.707107 * occ_func_0_1(34)) + (0.707107 * occ_func_0_1(26)) + (0.707107 * occ_func_0_1(39)) + (0.707107 * occ_func_0_1(40)) + (0.707107 * occ_func_0_1(30))) + (m_occ_func_0_1[occ_f] - m_occ_func_0_1[occ_i]) * ((0.707107 * occ_func_0_0(38)) + (0.707107 * occ_func_0_0(34)) + (0.707107 * occ_func_0_0(26)) + (0.707107 * occ_func_0_0(39)) + (0.707107 * occ_func_0_0(40)) + (0.707107 * occ_func_0_0(30)));
  }
  double Clexulator::delta_site_eval_at_0_bfunc_2_4_2(int occ_i, int occ_f) const {
    return (m_occ_func_0_1[occ_f] - m_occ_func_0_1[occ_i]) * ((occ_func_0_1(38)) + (occ_func_0_1(34)) + (occ_func_0_1(26)) + (occ_func_0_1(39)) + (occ_func_0_1(40)) + (occ_func_0_1(30)));
  }

  /**** Basis functions for orbit 2, 5****
  #Points: 2
  MaxLength: 8.4852814  MinLength: 8.4852814
   0.0000000   0.0000000   0.0000000 A B Va
   3.0000000   0.0000000   0.0000000 A B Va
  ****/
  double Clexulator::eval_bfunc_2_5_0() const {
    return ((occ_func_1_0(1) * occ_func_1_0(35)) + (occ_func_1_0(1) * occ_func_1_0(42)) + (occ_func_1_0(1) * occ_func_1_0(31))) / 3.0;
  }

  double Clexulator::site_eval_at_1_bfunc_2_5_0() const {
    return (occ_func_1_0(1) * occ_func_1_0(35)) + (occ_func_1_0(41) * occ_func_1_0(1)) + (occ_func_1_0(1) * occ_func_1_0(42)) + (occ_func_1_0(27) * occ_func_1_0(1)) + (occ_func_1_0(1) * occ_func_1_0(31)) + (occ_func_1_0(43) * occ_func_1_0(1));
  }

  double Clexulator::delta_site_eval_at_1_bfunc_2_5_0(int occ_i, int occ_f) const {
    return (m_occ_func_1_0[occ_f] - m_occ_func_1_0[occ_i]) * ((occ_func_1_0(35)) + (occ_func_1_0(41)) + (occ_func_1_0(42)) + (occ_func_1_0(27)) + (occ_func_1_0(31)) + (occ_func_1_0(43)));
  }

}
#endif
