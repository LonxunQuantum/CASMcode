#include "casm/clex/ECIContainer.hh"

#include "Common.hh"
#include "casm/casm_io/json/InputParser_impl.hh"
#include "casm/clex/io/json/ECIContainer_json_io.hh"
#include "gtest/gtest.h"

using namespace CASM;

class ECIContainerJSONTest : public testing::Test {
 protected:
  ECIContainerJSONTest()
      : eci_json(test::data_file("clex", "FCC_ternary_bspecs_ex0_basis.json")) {

  }

  void add_simple_eci() {
    // Basis generated by OccClexulatorTest (FCC_ternary), expect:
    // Cluster Orbit 0 (null): 1 function (0)
    // Cluster Orbit 1 (point): 2 functions (1-2)
    // Cluster Orbit 2 (pair): 3 functions (3-5)
    // Cluster Orbit 3 (pair): 3 functions (6-8)
    // Cluster Orbit 4 (pair): 3 functions (9-11)
    // Cluster Orbit 5 (pair): 3 functions (12-14)
    // Cluster Orbit 6 (pair): 3 functions (15-17)
    // Cluster Orbit 7 (pair): 3 functions (18-20)
    // Cluster Orbit 8 (triple): 4 functions (21-24)
    // Cluster Orbit 9 (triple): 6 functions (25-30)
    // Cluster Orbit 10 (triple): 6 functions (31-36)
    // Cluster Orbit 11 (triple): 8 functions (37-44)
    // Cluster Orbit 12 (triple): 8 functions (45-52)
    // Cluster Orbit 13 (quadruple): 12 functions (53-64)
    // Cluster Orbit 14 (quadruple): 10 functions (65-74)

    // add 2 eci

    // linear_function_index==0
    eci_json["orbits"][0]["cluster_functions"][0]["eci"] = 1.0;

    // linear_function_index==7
    eci_json["orbits"][3]["cluster_functions"][1]["eci"] = 4.0;
  }

  jsonParser eci_json;
};

TEST_F(ECIContainerJSONTest, FromJSON) {
  // setup
  add_simple_eci();

  // read eci JSON
  InputParser<ECIContainer> eci_parser{eci_json};

  // assert
  EXPECT_TRUE(eci_parser.valid());

  ECIContainer const &eci = *eci_parser.value;
  EXPECT_EQ(eci.size(), 2);

  EXPECT_EQ(eci.index()[0], 0);
  EXPECT_TRUE(almost_equal(eci.value()[0], 1.0));

  EXPECT_EQ(eci.index()[1], 7);  // linear_function_index==7
  EXPECT_TRUE(almost_equal(eci.value()[1], 4.0));
}
